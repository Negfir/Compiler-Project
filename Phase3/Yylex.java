/* The following code was generated by JFlex 1.7.0 */

/*package jSHLang;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.*;

class MainClass {
    public static void main(String[] args) {
        FileReader fr = null;
        String input = "Code.txt";
        try {
            fr = new FileReader(input);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        System.out.println("Lexeme\tToken\tAttribute");
        Yylex yylex = new Yylex(fr);
        try {
            yylex.yylex();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
*/


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ph2.lex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\1\0\1\0\1\55\1\55\1\0\23\0\1\22\3\0\1\25"+
                  "\1\26\1\0\1\6\1\7\1\23\1\15\1\5\1\16\1\14\1\24"+
                  "\12\2\1\4\1\3\1\20\1\17\1\21\1\36\1\0\1\1\1\1"+
                  "\4\1\1\1\23\1\1\10\1\0\1\11\3\0\1\31\1\45\1\42"+
                  "\1\33\1\43\1\51\1\44\1\47\1\41\1\1\1\53\1\46\1\52"+
                  "\1\32\1\34\2\1\1\35\1\37\1\40\1\54\1\50\4\1\1\12"+
                  "\1\27\1\13\1\30\6\0\1\55\u1fa2\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
                  "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
                  "\1\20\1\21\1\22\1\1\1\23\1\24\1\25\2\1"+
                  "\1\26\2\2\1\27\11\2\1\30\1\31\1\32\1\33"+
                  "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
                  "\1\44\1\0\1\45\6\0\1\46\7\0\1\47\5\0"+
                  "\1\50\12\0\1\51\1\52\1\53\4\0\1\54\1\55"+
                  "\1\0\1\56\1\57\1\0\1\60\2\0\1\61\5\0"+
                  "\1\62\1\63\6\0\1\64\4\0\1\65\1\66\1\67"+
                  "\1\0\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
                  "\0\56\0\56\0\56\0\56\0\56\0\56\0\134\0\212"+
                  "\0\270\0\346\0\u0114\0\u0142\0\u0170\0\u019e\0\56\0\u01cc"+
                  "\0\u01fa\0\56\0\u0228\0\u0256\0\56\0\u0284\0\u02b2\0\u02e0"+
                  "\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\56\0\56"+
                  "\0\56\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
                  "\0\u0422\0\56\0\56\0\u0450\0\56\0\u047e\0\u04ac\0\u04da"+
                  "\0\u0508\0\u0536\0\u0564\0\56\0\u0592\0\u05c0\0\u05ee\0\u061c"+
                  "\0\u064a\0\u0678\0\u06a6\0\56\0\u06d4\0\u0702\0\u0730\0\u075e"+
                  "\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce"+
                  "\0\u08fc\0\u092a\0\u0958\0\u0986\0\56\0\56\0\56\0\u09b4"+
                  "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\56\0\u0a9a\0\u0ac8\0\56"+
                  "\0\u0af6\0\56\0\u0b24\0\u0b52\0\56\0\u0b80\0\u0bae\0\u0bdc"+
                  "\0\u0c0a\0\u0c38\0\56\0\56\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
                  "\0\u0d1e\0\u0d4c\0\56\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\56"+
                  "\0\56\0\56\0\u0e32\0\56\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                  "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
                  "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
                  "\1\32\1\33\2\3\1\34\1\3\1\35\1\36\1\37"+
                  "\1\40\1\41\1\42\1\43\1\44\2\3\1\45\1\46"+
                  "\3\3\74\0\1\47\1\0\1\50\54\0\1\51\1\52"+
                  "\55\0\1\53\55\0\1\54\55\0\1\55\55\0\1\56"+
                  "\55\0\1\57\55\0\1\60\4\0\1\61\57\0\1\62"+
                  "\56\0\1\63\60\0\1\64\60\0\1\65\2\0\1\66"+
                  "\55\0\1\67\52\0\1\70\3\0\1\71\5\0\1\72"+
                  "\40\0\1\73\16\0\1\74\40\0\1\75\12\0\1\76"+
                  "\54\0\1\77\50\0\1\100\50\0\1\101\55\0\1\102"+
                  "\52\0\1\103\25\0\2\61\26\0\5\61\1\0\16\61"+
                  "\34\0\1\104\71\0\1\105\37\0\1\106\100\0\1\107"+
                  "\47\0\1\110\52\0\1\111\52\0\1\112\47\0\1\113"+
                  "\17\0\1\114\34\0\1\115\63\0\1\116\66\0\1\117"+
                  "\41\0\1\120\62\0\1\121\62\0\1\122\52\0\1\123"+
                  "\52\0\1\124\60\0\1\125\60\0\1\126\41\0\1\127"+
                  "\66\0\1\130\51\0\1\131\1\132\60\0\1\133\47\0"+
                  "\1\134\63\0\1\135\55\0\1\136\60\0\1\137\42\0"+
                  "\1\140\61\0\1\141\53\0\1\142\61\0\1\143\60\0"+
                  "\1\144\51\0\1\145\56\0\1\146\61\0\1\147\41\0"+
                  "\1\150\71\0\1\151\53\0\1\152\55\0\1\153\54\0"+
                  "\1\154\56\0\1\155\44\0\1\156\54\0\1\157\66\0"+
                  "\1\160\44\0\1\161\55\0\1\162\61\0\1\163\74\0"+
                  "\1\164\43\0\1\165\53\0\1\166\57\0\1\167\45\0"+
                  "\1\170\66\0\1\171\65\0\1\172\45\0\1\173\65\0"+
                  "\1\174\37\0\1\175\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\15\11\10\1\1\11\2\1\1\11\2\1\1\11"+
                  "\11\1\12\11\1\1\2\11\1\0\1\11\6\0\1\11"+
                  "\7\0\1\11\5\0\1\1\12\0\3\11\4\0\1\1"+
                  "\1\11\1\0\1\1\1\11\1\0\1\11\2\0\1\11"+
                  "\5\0\2\11\6\0\1\11\4\0\3\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          {
          }
          // fall through
          case 58: break;
          case 2:
          { //System.out.println(yytext() + "\t" + "LETTER\t" + '-');
            return YYParser.LETTER;
          }
          // fall through
          case 59: break;
          case 3:
          { //System.out.println(yytext() + "\t" + "NUM\t" + '-');
            return YYParser.NUM;
          }
          // fall through
          case 60: break;
          case 4:
          { //System.out.println(yytext() + "\t" + "SEMICOLON\t" + '-');
            return YYParser.SEMICOLON;
          }
          // fall through
          case 61: break;
          case 5:
          { //System.out.println(yytext() + "\t" + "COLON\t" + '-');
            return YYParser.COLON;
          }
          // fall through
          case 62: break;
          case 6:
          { //System.out.println(yytext() + "\t" + "COMMA\t" + '-');
            return YYParser.COMMA;
          }
          // fall through
          case 63: break;
          case 7:
          { //System.out.println(yytext() + "\t" + "LP\t" + '-');
            return YYParser.LP;
          }
          // fall through
          case 64: break;
          case 8:
          { //System.out.println(yytext() + "\t" + "RP\t" + '-');
            return YYParser.RP;
          }
          // fall through
          case 65: break;
          case 9:
          { //System.out.println(yytext() + "\t" + "LB\t" + '-');
            return YYParser.LB;
          }
          // fall through
          case 66: break;
          case 10:
          { //System.out.println(yytext() + "\t" + "RB\t" + '-');
            return YYParser.RB;
          }
          // fall through
          case 67: break;
          case 11:
          { //System.out.println(yytext() + "\t" + "LCB\t" + '-');
            return YYParser.LCB;
          }
          // fall through
          case 68: break;
          case 12:
          { //System.out.println(yytext() + "\t" + "RCB\t" + '-');
            return YYParser.RCB;
          }
          // fall through
          case 69: break;
          case 13:
          { //System.out.println(yytext() + "\t" + "DOT\t" + '-');
            return YYParser.DOT;
          }
          // fall through
          case 70: break;
          case 14:
          { //System.out.println(yytext() + "\t" + "ADD\t" + '-');
            return YYParser.ADD;
          }
          // fall through
          case 71: break;
          case 15:
          { //System.out.println(yytext() + "\t" + "SUB\t" + '-');
            return YYParser.SUB;
          }
          // fall through
          case 72: break;
          case 16:
          { //System.out.println(yytext() + "\t" + "ASSIGN\t" + '-');
            return YYParser.ASSIGN;
          }
          // fall through
          case 73: break;
          case 17:
          { //System.out.println(yytext() + "\t" + "LT\t" + '-');
            return YYParser.LT;
          }
          // fall through
          case 74: break;
          case 18:
          { //System.out.println(yytext() + "\t" + "GT\t" + '-');
            return YYParser.GT;
          }
          // fall through
          case 75: break;
          case 19:
          { //System.out.println(yytext() + "\t" + "MUL\t" + '-');
            return YYParser.MUL;
          }
          // fall through
          case 76: break;
          case 20:
          { //System.out.println(yytext() + "\t" + "DIV\t" + '-');
            return YYParser.DIV;
          }
          // fall through
          case 77: break;
          case 21:
          { //System.out.println(yytext() + "\t" + "MOD\t" + '-');
            return YYParser.MOD;
          }
          // fall through
          case 78: break;
          case 22:
          { //System.out.println(yytext() + "\t" + "TILDA\t" + '-');
            return YYParser.TILDA;
          }
          // fall through
          case 79: break;
          case 23:
          { //System.out.println(yytext() + "\t" + "َٔQUEST\t" + '-');
            return YYParser.QUEST;
          }
          // fall through
          case 80: break;
          case 24:
          { //System.out.println(yytext() + "\t" + "PLUSPLUS\t" + '-');
            return YYParser.PLUSPLUS;
          }
          // fall through
          case 81: break;
          case 25:
          { //System.out.println(yytext() + "\t" + "ADD_EQ\t" + '-');
            return YYParser.ADD_EQ;
          }
          // fall through
          case 82: break;
          case 26:
          { //System.out.println(yytext() + "\t" + "MINUSMINUS\t" + '-');
            return YYParser.MINMIN;
          }
          // fall through
          case 83: break;
          case 27:
          { //System.out.println(yytext() + "\t" + "SUB_EQ\t" + '-');
            return YYParser.SUB_EQ;
          }
          // fall through
          case 84: break;
          case 28:
          { //System.out.println(yytext() + "\t" + "EQUAL\t" + '-');
            return YYParser.EQUAL;
          }
          // fall through
          case 85: break;
          case 29:
          { //System.out.println(yytext() + "\t" + "LE\t" + '-');
            return YYParser.LE;
          }
          // fall through
          case 86: break;
          case 30:
          { //System.out.println(yytext() + "\t" + "GE\t" + '-');
            return YYParser.GE;
          }
          // fall through
          case 87: break;
          case 31:
          { //System.out.println(yytext() + "\t" + "NOT_EQUAL\t" + '-');
            return YYParser.NOT_EQUAL;
          }
          // fall through
          case 88: break;
          case 32:
          { //System.out.println(yytext() + "\t" + "MUL_EQ\t" + '-');
            return YYParser.MUL_EQ;
          }
          // fall through
          case 89: break;
          case 33:
          { //System.out.println(yytext() + "\t" + "DIV_EQ\t" + '-');
            return YYParser.DIV_EQ;
          }
          // fall through
          case 90: break;
          case 34:
          { //System.out.println(yytext() + "\t" + "COMMENT\t" + '-');
            return YYParser.COMMENT;
          }
          // fall through
          case 91: break;
          case 35:
          { //System.out.println(yytext() + "\t" + "AND_LOG\t" + '-');
            return YYParser.AND_LOG;
          }
          // fall through
          case 92: break;
          case 36:
          { //System.out.println(yytext() + "\t" + "OR_LOG\t" + '-');
            return YYParser.OR_LOG;
          }
          // fall through
          case 93: break;
          case 37:
          { //System.out.println(yytext() + "\t" + "OR\t" + '-');
            return YYParser.OR;
          }
          // fall through
          case 94: break;
          case 38:
          { //System.out.println(yytext() + "\t" + "IF_KW\t" + '-');
            return YYParser.IF_KW;
          }
          // fall through
          case 95: break;
          case 39:
          { //System.out.println(yytext() + "\t" + "AND\t" + '-');
            return YYParser.AND;
          }
          // fall through
          case 96: break;
          case 40:
          { //System.out.println(yytext() + "\t" + "INT_KW\t" + '-');
            return YYParser.INT_KW;
          }
          // fall through
          case 97: break;
          case 41:
          { //System.out.println(yytext() + "\t" + "TRUE_KW\t" + '-');
            return YYParser.TRUE_KW;
          }
          // fall through
          case 98: break;
          case 42:
          { //System.out.println(yytext() + "\t" + "TILL_KW\t" + '-');
            return YYParser.TILL_KW;
          }
          // fall through
          case 99: break;
          case 43:
          { //System.out.println(yytext() + "\t" + "THEN_KW\t" + '-');
            return YYParser.THEN_KW;
          }
          // fall through
          case 100: break;
          case 44:
          { //System.out.println(yytext() + "\t" + "CHAR_KW\t" + '-');
            return YYParser.CHAR_KW;
          }
          // fall through
          case 101: break;
          case 45:
          { //System.out.println(yytext() + "\t" + "ELSE_KW\t" + '-');
            return YYParser.ELSE_KW;
          }
          // fall through
          case 102: break;
          case 46:
          { //System.out.println(yytext() + "\t" + "BOOL_KW\t" + '-');
            return YYParser.BOOL_KW;
          }
          // fall through
          case 103: break;
          case 47:
          { //System.out.println(yytext() + "\t" + "VOID_KW\t" + '-');
            return YYParser.VOID_KW;
          }
          // fall through
          case 104: break;
          case 48:
          { //System.out.println(yytext() + "\t" + "OTHER_KW\t" + '-');
            return YYParser.OTHER_KW;
          }
          // fall through
          case 105: break;
          case 49:
          { //System.out.println(yytext() + "\t" + "CONST_KW\t" + "-");
            return YYParser.CONST_KW;
          }
          // fall through
          case 106: break;
          case 50:
          { //System.out.println(yytext() + "\t" + "FALSE_KW\t" + '-');
            return YYParser.FALSE_KW;
          }
          // fall through
          case 107: break;
          case 51:
          { //System.out.println(yytext() + "\t" + "STATIC_KW\t" + '-');
            return YYParser.STATIC_KW;
          }
          // fall through
          case 108: break;
          case 52:
          { //System.out.println(yytext() + "\t" + "INTEGER_KW\t" + '-');
            return YYParser.INTEGER_KW;
          }
          // fall through
          case 109: break;
          case 53:
          { //System.out.println(yytext() + "\t" + "BOOLEAN_KW\t" + '-');
            return YYParser.BOOLEAN_KW;
          }
          // fall through
          case 110: break;
          case 54:
          { //System.out.println(yytext() + "\t" + "CONTINUE_KW\t" + '-');
            return YYParser.CONTINUE_KW;
          }
          // fall through
          case 111: break;
          case 55:
          { //System.out.println(yytext() + "\t" + "COMEBACK_KW\t" + '-');
            return YYParser.COMEBACK_KW;
          }
          // fall through
          case 112: break;
          case 56:
          { //System.out.println(yytext() + "\t" + "GIVEBACK_KW\t" + '-');
            return YYParser.GIVEBACK_KW;
          }
          // fall through
          case 113: break;
          case 57:
          { //System.out.println(yytext() + "\t" + "CHARACTER_KW\t" + '-');
            return YYParser.CHARACTER_KW;
          }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
